scale_fill_viridis_d() +
ylab("Distribution") +
xlab("Time to complete (in minutes)")
time_plot <- grid.arrange(t, p_tab, ncol = 2, widths = c(1,0.2))
# Exclude
df_time <- df_time %>%
filter(Duration > lower_limit)
paste("We excluded", nrow(df_complete) - nrow(df_time), "participants who took more than 2 hours to complete the study and with a completion time outside the 95% percentile (>", insight::format_value(lower_limit), "min). The mode duration is approximately", round(mode_duration, 2), "min.")
# Chunk 9
# Remove participants who do not live in the country and are not citizens
df_final <- df_time %>%
filter(Country_Residence == "Yes" | Country_Citizenship == "Yes")
paste("We excluded", nrow(df_time) - nrow(df_final), "participants who were neither citizens of the country nor lived there.")
# Label participants
df_final <- df_final %>%
mutate(Participant = paste0("S", 1:nrow(df_final)))
# Convert to factors
df_final$Dataset <- as.factor(df_final$Dataset)
# Split into Different Datasets
df_sg <- df_final %>%
filter(Dataset == "SG")
df_uk <- df_final %>%
filter(Dataset == "UK")
# Chunk 10
# Prepare
df_sg <- df_sg %>%
mutate(Gender = as.factor(Gender),
Education_Achieved = ifelse(!Education_Achieved %in% c("A Levels", "Bachelors Degree", "Diploma", "Masters Degree or similar", "Doctoral Degree or similar", "O/N Levels", NA), "Other", Education_Achieved),
Education_Pursuing = ifelse(!Education_Pursuing %in% c("Bachelors Degree", "Diploma", "Doctoral Degree or similar", "Masters Degree or similar", NA), "Other", Education_Pursuing),
Ethnicity = ifelse(!Ethnicity %in% c("Chinese", "Malay", "Indian"), "Other", Ethnicity),
Religion_Type = ifelse(!Religion_Type %in% c("No religion", "Buddhism", "Christianity", "Taoism", "Hinduism", "Islam"), "Other", Religion_Type)) %>%
select(Participant, Gender, everything())
# Report
paste("The final Singapore sample included", report_participants(df_sg, sex="Gender"))
df_sg %>%
select(System_Device, System_Screen, Duration, Age, Student, Education_Achieved, Education_Pursuing, Ethnicity, starts_with("Religion"), Income) %>%
report(levels_percentage = TRUE, missing_percentage = TRUE, n_entries = 10)
# Chunk 11
# Prepare
df_uk <- df_uk %>%
mutate(Participant = paste0("S", 1:nrow(df_uk)),
Gender = as.factor(Gender),
Education_Achieved = ifelse(!Education_Achieved %in% c("A Levels", "Bachelors Degree", "Diploma", "Masters Degree or similar", "Doctoral Degree or similar", "O/N Levels", NA), "Other", Education_Achieved),
Education_Pursuing = ifelse(!Education_Pursuing %in% c("Bachelors Degree", "Diploma", "Doctoral Degree or similar", "Masters Degree or similar", NA), "Other", Education_Pursuing)) %>%
mutate(Ethnicity = ifelse(Ethnicity %in% c("White - North European", "White - South European"), "White",
ifelse(Ethnicity %in% c("Chinese, Japanese, or other South East Asian", "Asian"), "Asian",
ifelse(Ethnicity %in% c("Hispanic", "Latina "), "Spain and Latin America", "Other")))) %>%
mutate(Religion_Type = ifelse(Religion_Type %in% c("Muslim", "Islam"), "Islam",
ifelse(Religion_Type %in% c("Christadelphian", "Christian Orthodox", "Christian ", "Protestant", "Catholic"), "Christianity",
ifelse(Religion_Type %in% c("Hindu"), "Hinduism",
ifelse(Religion_Type %in% c("Buddhist"), "Buddhism",
"Other"))))) %>%
select(Participant, Gender, everything())
# Report
paste("The final UK sample included", report_participants(df_uk, sex="Gender"))
df_uk %>%
select(System_Device, System_Screen, Duration, Age, Student, Education_Achieved, Education_Pursuing, Ethnicity, starts_with("Religion"), Income) %>%
report(levels_percentage = TRUE, missing_percentage = TRUE, n_entries = 10)
# Chunk 12
w_gender <- waffle(table(df_sg$Gender), rows=5, size=1,
colors=c("#19b5fc", "#306bf2"),
title= paste("Gender (N =", sum(table(df_sg$Gender)),")"), xlab="One square == 1 person")
w_ethnicity <- waffle(table(df_sg$Ethnicity), rows=5, size=1,                                      colors=c("#97E597", "#3CE53C", "#049204", "#316B31"),
title= paste("Ethnicity (N =", sum(table(df_sg$Ethnicity)),")"), xlab="One square == 1 person")
w_religion <- waffle(sort(table(df_sg$Religion_Type), decreasing=TRUE),
rows=5, size=1,
colors=c("#E7ABF6", "#C295F7", "#D347F4", "#8C43E3", "#9A0CBB", "#5B12B2", "#67077E"),
title= paste("Religion (N =", sum(table(df_sg$Religion_Type)),")"), xlab="One square == 1 person")
w_education_achieved <- waffle(sort(table(df_sg$Education_Achieved), decreasing=TRUE), rows=5, size=1,
colors=c("#F6CCE8", "#ffa7d8", "#E58AC6", "#FF38BB", "#FF0092", "#AB0A66", "#67043D"),
title= paste("Non-Students: Education (N =", sum(table(df_sg$Education_Achieved)),")"), xlab="One square == 1 person")
w_education_pursuing <- waffle(sort(table(df_sg$Education_Pursuing), decreasing=TRUE), rows=5, size=1,
colors=c("#F7E497", "#F2CB35", "#FFB400", "#D6801F", "#A75B05"),
title= paste("Students: Education in Pursuit (N =", sum(table(df_sg$Education_Pursuing)),")"), xlab="One square == 1 person")
w_COVID <- waffle(sort(table(df_sg$COVID_Diagnosis), decreasing=TRUE), rows=5, size=1,
colors=c("#F2AAAA", "#EC6640", "#FF0B00"),
title= paste("COVID-19 Status (N =", sum(table(df_sg$COVID_Diagnosis)),")"), xlab="One square == 1 person")
demographics_plot_1 <- plot_grid(w_gender, w_ethnicity,
w_education_achieved, w_education_pursuing,
w_religion, w_COVID,
nrow=3, ncol=2, align="hv")
ggsave("figures/demographics_SG.png", demographics_plot_1, height=figwidth, width=figwidth*1.5, dpi=600)
# Chunk 13
w_gender <- waffle(table(df_uk$Gender), rows=5, size=1,
colors=c("#19b5fc", "#306bf2"),
title= paste("Gender (N =", sum(table(df_uk$Gender)),")"), xlab="One square == 1 person")
w_ethnicity <- waffle(table(df_uk$Ethnicity), rows=5, size=1,                                      colors=c("#dff7df", "#b6ecb6", "#97e597", "#87ce87"),
title= paste("Ethnicity (N =", sum(table(df_uk$Ethnicity)),")"), xlab="One square == 1 person")
w_religion <- waffle(sort(table(df_uk$Religion_Type), decreasing=TRUE),
rows=5, size=1,
colors=c("#E7ABF6", "#C295F7", "#8C43E3", "#5B12B2"),
title= paste("Religion (N =", sum(table(df_uk$Religion_Type)),")"), xlab="One square == 1 person")
w_education_achieved <- waffle(sort(table(df_uk$Education_Achieved), decreasing=TRUE), rows=5, size=1,
colors=c("#F6CCE8", "#ffa7d8", "#E58AC6", "#FF38BB", "#FF0092", "#AB0A66", "#67043D"),
title= paste("Non-Students: Education (N =", sum(table(df_uk$Education_Achieved)),")"), xlab="One square == 1 person")
w_education_pursuing <- waffle(sort(table(df_uk$Education_Pursuing), decreasing=TRUE), rows=5, size=1,
colors=c("#F7E497", "#F2CB35", "#FFB400", "#D6801F", "#A75B05"),
title= paste("Students: Education in Pursuit (N =", sum(table(df_uk$Education_Pursuing)),")"), xlab="One square == 1 person")
w_COVID <- waffle(sort(table(df_uk$COVID_Diagnosis), decreasing=TRUE), rows=5, size=1,
colors=c("#F2AAAA", "#EC6640", "#FF0B00", "#B30800"),
title= paste("COVID-19 Status (N =", sum(table(df_uk$COVID_Diagnosis)),")"), xlab="One square == 1 person")
demographics_plot_2 <- plot_grid(w_gender, w_ethnicity,
w_education_achieved, w_education_pursuing,
w_religion, w_COVID,
nrow=3, ncol=2)
ggsave("figures/demographics_uk.png", demographics_plot_2, height=figwidth, width=figwidth*1.5, dpi=600)
# Chunk 14
# SG Income
mean_income_sg <- df_sg %>%
filter(Student == "No") %>%
filter(!is.na(Education_Achieved)) %>%
filter(!is.na(Income)) %>%
summarize(mean = mean(Income))
mean_income_sg <- mean_income_sg$mean
p_income_sg <- df_sg %>%
filter(Student == "No") %>%
filter(!is.na(Education_Achieved)) %>%
filter(!is.na(Income)) %>%
ggplot(aes(x = Income, color = Education_Achieved)) +
geom_density(size = 1, alpha=0.3) +
labs(colour = "Education Level") +
xlab("Monthly Household Income per Capita (SGD)") +
xlim(0, 10000) +
annotate("text", x=mean_income_sg-200, y=0.0002, label = paste("Mean = S$", round(mean_income_sg, 2))) +
geom_vline(aes(xintercept = mean_income_sg), linetype='dashed', size=1) +
theme_modern() +
ggtitle("Singapore Sample") +
scale_fill_brewer(palette="Dark2")
# UK Income
mean_income_uk <- df_uk %>%
filter(Student == "No") %>%
filter(!is.na(Education_Achieved)) %>%
filter(!is.na(Income)) %>%
summarise(mean = mean(Income))
mean_income_uk <- mean_income_uk$mean
p_income_uk <- df_uk %>%
filter(Student == "No") %>%
filter(!is.na(Education_Achieved)) %>%
filter(!is.na(Income)) %>%
ggplot(aes(x = Income, color = Education_Achieved)) +
geom_density(size = 1, alpha=0.3) +
labs(colour = "Education Level") +
xlab("Monthly Household Income per Capita (GBP converted to SGD)") +
xlim(0, 20000) +
annotate("text", x=mean_income_uk-200, y=0.0002, label = paste("Mean = S$", round(mean_income_uk, 2))) +
geom_vline(aes(xintercept = mean_income_uk), linetype='dashed', size=1) +
theme_modern() +
ggtitle("UK Sample") +
scale_fill_brewer(palette="Dark2")
p_income_sg + p_income_uk
# Chunk 15
bind_rows(df_sg, df_uk) %>%
ggplot(aes(x = Age)) +
geom_histogram(aes(color = Dataset, fill = Dataset), position = 'identity', binwidth = 1, alpha = 0.4) +
scale_fill_manual(values = c("#00AFBB", "#E7B800")) +
scale_color_manual(values = c("#00AFBB", "#E7B800")) +
xlab("Age (years)") +
theme_modern()
# Correlation between survey completion duration and age
# df_sg %>%
#  ggplot(aes(x=Age, y=Duration)) +
#  geom_point() +
#  geom_smooth(method = "lm", alpha = 0.2) +
#  ggtitle(paste("r =", insight::format_value(cor.test(df_sg$Age, df_sg$Duration)$estimate), ", p =", insight::format_value(cor.test(df_sg$Age, df_sg$Duration)$p.value))) +
#  ylab("Duration of Survey Completion (min)") +
#  xlab("Age (years)") +
#  theme_modern()
# Chunk 16
# SG Religion
p_religion_sg <- df_sg %>%
filter(!is.na(Religion_Engagement)) %>%
filter(!is.na(Religion_Type)) %>%
filter(!is.na(Religion_Faith)) %>%
ggplot(aes(x = Religion_Engagement, color=Religion_Type)) +
labs(colour = "Religion") +
xlab("Religious Engagement") +
geom_density(size = 1, alpha=0.5) +
scale_fill_brewer(palette="Accent") +
ggtitle("Singapore Sample") +
theme_modern()
# UK Religion
p_religion_uk <- df_uk %>%
filter(!is.na(Religion_Engagement)) %>%
filter(!is.na(Religion_Type)) %>%
filter(!is.na(Religion_Faith)) %>%
ggplot(aes(x = Religion_Engagement, color=Religion_Type)) +
labs(colour = "Religion") +
xlab("Religious Engagement") +
geom_density(size = 1, alpha=0.5) +
scale_fill_brewer(palette="Accent") +
ggtitle("UK Sample") +
theme_modern()
p_religion_sg + p_religion_uk
# Relationship between religious engagement and faith
p_religion2_sg <- df_sg %>%
filter(!is.na(Religion_Engagement)) %>%
filter(!is.na(Religion_Faith)) %>%
filter(!is.na(Religion_Type)) %>%
ggplot(aes(x = Religion_Faith, y = Religion_Engagement, colour = Religion_Type, fill = Religion_Type)) +
geom_jitter() +
geom_smooth(method = "lm", alpha = 0.2) +
ggtitle(paste("Singapore Sample, r =", insight::format_value(cor.test(df_sg$Religion_Engagement, df_sg$Religion_Faith)$estimate))) +
theme_modern()
p_religion2_uk <- df_uk %>%
filter(!is.na(Religion_Engagement)) %>%
filter(!is.na(Religion_Faith)) %>%
filter(!is.na(Religion_Type)) %>%
ggplot(aes(x = Religion_Faith, y = Religion_Engagement, colour = Religion_Type, fill = Religion_Type)) +
geom_jitter() +
geom_smooth(method = "lm", alpha = 0.2) +
ggtitle(paste("UK Sample, r =", insight::format_value(cor.test(df_uk$Religion_Engagement, df_uk$Religion_Faith)$estimate))) +
theme_modern()
p_religion2_sg / p_religion2_uk
# Overall religiosity across countries
p_religion_engagement <- bind_rows(df_sg, df_uk) %>%
ggplot(aes(x = Religion_Engagement)) +
geom_density(aes(color = Dataset, fill = Dataset), position = 'identity', binwidth = 1, alpha = 0.4) +
scale_fill_manual(values = c("#00AFBB", "#E7B800")) +
scale_color_manual(values = c("#00AFBB", "#E7B800")) +
xlab("Religion Engagement") +
theme_modern()
p_religion_faith <- bind_rows(df_sg, df_uk) %>%
ggplot(aes(x = Religion_Faith)) +
geom_density(aes(color = Dataset, fill = Dataset), position = 'identity', binwidth = 1, alpha = 0.4) +
scale_fill_manual(values = c("#00AFBB", "#E7B800")) +
scale_color_manual(values = c("#00AFBB", "#E7B800")) +
xlab("Religion Faith") +
theme_modern()
p_religion_engagement + p_religion_faith
# Combine into one religion index
df_sg <- df_sg %>%
mutate(Religion = (Religion_Engagement + Religion_Faith) / 2)
df_uk <- df_uk %>%
mutate(Religion = (Religion_Engagement + Religion_Faith) / 2)
# Summary
ggstatsplot::grouped_ggbetweenstats(
data = melt(bind_rows(df_sg, df_uk), measure.vars=c("Religion_Engagement", "Religion_Faith")),
x = Dataset,
y = value,
plot.type = "boxviolin",
grouping.var = variable,
mean.ci = TRUE,
outlier.tagging = FALSE,
xlab = "Sample",
ylab = "Value",
title.prefix = NULL,
notch = FALSE,
bf.message = FALSE,
results.subtitle = FALSE,
title.text = "Religiosity Differences across Singapore and UK"
)
# Chunk 17
# Rescale COVID impact
df_sg[stringr::str_detect(names(df_sg), "COVID_")][2:6] <- effectsize::change_scale(select(df_sg[stringr::str_detect(names(df_sg), "COVID_")], -COVID_Diagnosis), from = c(0, 6), to = c(-3, 3))
df_uk[stringr::str_detect(names(df_uk), "COVID_")][2:6] <- effectsize::change_scale(select(df_uk[stringr::str_detect(names(df_uk), "COVID_")], -COVID_Diagnosis), from = c(0, 6), to = c(-3, 3))
p_impact_sg <- descriptive_statistics(select(df_sg, -COVID_Diagnosis), "COVID", dataset="Singapore Sample")
p_impact_uk <- descriptive_statistics(select(df_uk, -COVID_Diagnosis), "COVID", dataset="UK Sample")
p_impact_sg + p_impact_uk
# Chunk 18
# Correlation between Compliance and Belief
p_measurescorr_sg <- dataframe_wrangle(df_sg, dataset = "Singapore Sample")
p_measurescorr_uk <- dataframe_wrangle(df_uk, dataset = "UK Sample")
p_measurescorr_sg / p_measurescorr_uk
# Combine into one precuationery measures engagement index per type
df_sg <- df_sg %>%
mutate(Measures_Distancing = (Belief_Distancing + Compliance_Distancing) / 2,
Measures_WashingHands = (Belief_WashHands + Compliance_WashHands) / 2,
Measures_StayHome = (Belief_StayHome + Compliance_StayHome) / 2,
Measures_TouchFace = (Belief_Face + Compliance_Face) / 2,
Measures_WearMask = (Belief_Mask + Compliance_Mask) / 2) %>%
select(-starts_with("Belief"), -starts_with("Compliance"))
df_uk <- df_uk %>%
mutate(Measures_Distancing = (Belief_Distancing + Compliance_Distancing) / 2,
Measures_WashingHands = (Belief_WashHands + Compliance_WashHands) / 2,
Measures_StayHome = (Belief_StayHome + Compliance_StayHome) / 2,
Measures_TouchFace = (Belief_Face + Compliance_Face) / 2,
Measures_WearMask = (Belief_Mask + Compliance_Mask) / 2) %>%
select(-starts_with("Belief"), -starts_with("Compliance"))
# Chunk 19
df_combined <- bind_rows(df_sg, df_uk)
om <- df_combined %>%
select(starts_with("Measures")) %>%
psych::omega(nfactors = 2, fm = "ml", title = "Omega of COVID19 Precautionary Measures",
plot = FALSE, n.obs = nrow(bind_rows(df_sg, df_uk)))
psych::omega.diagram(om)
df_combined$Measures_G <- om$scores[,1]
df_combined$Measures_Compliance <- om$scores[,2]
df_combined$Measures_Spontaneous <- om$scores[,3]
# Chunk 20
# Categorize measures
df_combined <- df_combined %>%
select(-Measures_Distancing, -Measures_WashingHands, -Measures_TouchFace, -Measures_StayHome, -Measures_WearMask)
# Visualize
# p_measures_sg <- descriptive_statistics(df_sg, "Measures", dataset="Singapore Sample")
# p_measures_uk <- descriptive_statistics(df_uk, "Measures", dataset="UK Sample")
# p_measures_sg + p_measures_uk
descriptive_statistics(df_combined, "Measures")
# Chunk 21
p_gov_sg <- descriptive_statistics(df_sg, "Gov", dataset="Singapore Sample")
p_gov_uk <- descriptive_statistics(df_uk, "Gov", dataset="UK Sample")
p_gov_sg + p_gov_uk
# Chunk 22
# News type
p_freq_sg <- df_sg %>%
select(starts_with("Frequency_"), "Participant") %>%
melt(id = "Participant") %>%
arrange(Participant) %>%
mutate(variable = str_remove(variable, "Frequency_")) %>%
rename(News = variable,
Frequency = value) %>%
ggplot(aes(x=Frequency, fill=News)) +
geom_bar(position = "dodge") +
xlab("News Frequency per day") +
ggtitle("Singapore Sample") +
theme_modern()
p_freq_uk <- df_uk %>%
select(starts_with("Frequency_"), "Participant") %>%
melt(id = "Participant") %>%
arrange(Participant) %>%
mutate(variable = str_remove(variable, "Frequency_")) %>%
rename(News = variable,
Frequency = value) %>%
ggplot(aes(x=Frequency, fill=News)) +
geom_bar(position = "dodge") +
xlab("News Frequency per day") +
ggtitle("UK Sample") +
theme_modern()
p_freq_sg + p_freq_uk
# Source of News Outlets
p_source_sg <- descriptive_statistics(df_sg, "Source", "Singapore Sample")
p_source_uk <- descriptive_statistics(df_uk, "Source", "UK Sample")
p_source_sg + p_source_uk
# Chunk 23
p_CMQ_sg <- descriptive_statistics(df_sg, "CMQ", dataset="Singapore Sample")
p_CMQ_uk <- descriptive_statistics(df_uk, "CMQ", dataset="UK Sample")
p_CMQ_sg + p_CMQ_uk
# Chunk 24
p_PBS_sg <- descriptive_statistics(df_sg, "PBS", dataset="Singapore Sample")
p_PBS_uk <- descriptive_statistics(df_uk, "PBS", dataset="UK Sample")
p_PBS_sg + p_PBS_uk
# Chunk 25
p_GPTS_sg <- descriptive_statistics(df_sg, "GPTS", dataset="Singapore Sample")
p_GPTS_uk <- descriptive_statistics(df_uk, "GPTS", dataset="UK Sample")
p_GPTS_sg + p_GPTS_uk
# Chunk 26
p_BSCS_sg <- descriptive_statistics(df_sg, "BSCS", dataset="Singapore Sample")
p_BSCS_uk <- descriptive_statistics(df_uk, "BSCS", dataset="UK Sample")
p_BSCS_sg + p_BSCS_uk
# Chunk 27
p_IUS_sg <- descriptive_statistics(df_sg, "IUS", dataset="Singapore Sample")
p_IUS_uk <- descriptive_statistics(df_uk, "IUS", dataset="UK Sample")
p_IUS_sg + p_IUS_uk
# Chunk 28
p_MAIA_sg <- descriptive_statistics(df_sg, "MAIA", dataset="Singapore Sample")
p_MAIA_uk <- descriptive_statistics(df_uk, "MAIA", dataset="UK Sample")
p_MAIA_sg + p_MAIA_uk
# Chunk 29
p_SPQ_sg <- descriptive_statistics(df_sg, "SPQ", dataset="Singapore Sample")
p_SPQ_uk <- descriptive_statistics(df_uk, "SPQ", dataset="UK Sample")
p_SPQ_sg + p_SPQ_uk
# Chunk 30
p_PANAS_sg <- descriptive_statistics(df_sg, "PANAS", dataset="Singapore Sample")
p_PANAS_uk <- descriptive_statistics(df_uk, "PANAS", dataset="UK Sample")
p_PANAS_sg + p_PANAS_uk
# Chunk 31
# Beliefs
p_NEWSb_sg <- descriptive_statistics(select(df_sg, ends_with("_Belief")), "News", dataset="Singapore Sample")
p_NEWSb_uk <- descriptive_statistics(select(df_uk, ends_with("_Belief")), "News", dataset="UK Sample")
p_NEWSb_sg + p_NEWSb_uk
# Familiarity
p_NEWSf_sg <- descriptive_statistics(select(df_sg, ends_with("_Familiarity")), "News", dataset="Singapore Sample")
p_NEWSf_uk <- descriptive_statistics(select(df_uk, ends_with("_Familiarity")), "News", dataset="UK Sample")
p_NEWSf_sg + p_NEWSf_uk
# Importance
p_NEWSi_sg <- descriptive_statistics(select(df_sg, ends_with("_Importance")), "News", dataset="Singapore Sample")
p_NEWSi_uk <- descriptive_statistics(select(df_uk, ends_with("_Importance")), "News", dataset="UK Sample")
p_NEWSi_sg + p_NEWSi_uk
# Chunk 32
df_combined <- df_combined %>%
arrange(Dataset)
# Reshape Data
names(df_combined) <- gsub("[News]_", "", names(df_combined))
df_long <- df_combined %>%
pivot_longer(
cols = starts_with("New"),
names_to = c("News_Item", ".value"),
names_sep = "_",
) %>%
mutate(News_Item = as.numeric(str_remove(News_Item, "New"))) %>%
rename(News_Belief = Belief,
News_Familiarity = Familiarity,
News_Importance = Importance) %>%
# Marker of Fake or Real (1-11 items are fake, scored 0)
mutate(FakeorReal = ifelse(News_Item >= 1 & News_Item <= 11, "Fake", "Real")) %>%
mutate(FakeorReal = as.factor(FakeorReal))
#Convert to factor
df_long$News_Item <- as.factor(df_long$News_Item)
# Chunk 33
colors_fakereal <- c("Fake" = "#ff0000", "Real" = "#00e600")
# Baseline models
baseline_model1 <- glmmTMB(News_Belief ~ FakeorReal + (1|Participant), data = df_long)
baseline_model2 <- glmmTMB(News_Belief ~ FakeorReal + (1|Participant) + (1|News_Item), data = df_long)
baseline_model3 <- glmmTMB(News_Belief ~ FakeorReal + (1|Participant) + (1|News_Item) + (1|Dataset), data = df_long)
baseline_model4 <- glmmTMB(News_Belief ~ FakeorReal + (1+FakeorReal|Participant) + (1|News_Item) + (1|Dataset), data = df_long)
baseline_model5 <- glmmTMB(News_Belief ~ FakeorReal + (1|Participant) + (1|Dataset/News_Item), data = df_long)
baseline_model6 <- glmmTMB(News_Belief ~ FakeorReal + (1+FakeorReal|Participant) + (1|Dataset/News_Item), data = df_long)## KEEP THIS MODEL
performance::compare_performance(baseline_model1, baseline_model2, baseline_model3, baseline_model4) %>%
plot()
# Include FakeorReal as random slope since truth value may have different effect on participants
model_parameters(baseline_model6)
r2(baseline_model4)
modelbased::estimate_means(baseline_model6) %>%
ggplot(aes(x=FakeorReal, y=Mean, color=FakeorReal)) +
geom_line(aes(group = 1), size = 1) +
geom_pointrange(aes(ymin = CI_low, ymax = CI_high), size = 1) +
theme_modern() +
geom_hline(yintercept=0, linetype='dashed') +
ylab("Probability of Believing the News Item") +
xlab("Truth Value of News Item")
# Chunk 34
model_sex <- glmmTMB(News_Belief ~ FakeorReal * Gender + (1+FakeorReal|Participant) + (1|Dataset/News_Item), data = df_long)
model_parameters(model_sex)
# Visualize
modelbased::estimate_means(model_sex) %>%
ggplot(aes(x=Gender, y=Mean, group=FakeorReal, color=FakeorReal)) +
geom_ribbon(aes(ymin = CI_low, ymax = CI_high, fill=FakeorReal), alpha=0.5) +
geom_line(size = 1) +
geom_pointrange(aes(ymin = CI_low, ymax = CI_high), size = 1) +
theme_modern() +
ylab("Probability of Believing the News Item") +
xlab("Effect of Gender on News Beliefs")
# Chunk 35
model_age <- glmmTMB(News_Belief ~ FakeorReal * poly(Age, 2) + Education + (1+FakeorReal|Participant) + (1|Dataset/News_Item), data = df_long)
model_parameters(model_age)
# Visualize
modelbased::estimate_link(model_age, target=c("FakeorReal", "Age")) %>%
ggplot(aes(x=Age, y=Predicted)) +
geom_ribbon(aes(ymin = CI_low, ymax = CI_high, fill=FakeorReal), alpha=0.5) +
geom_line(aes(color=FakeorReal), size = 1) +
theme_modern() +
ylab("Probability of Believing the News Item") +
xlab("Effect of Age on News Beliefs")
# Chunk 36
# Relationship between religion and education
df_combined %>%
filter(!is.na(Religion)) %>%
filter(!is.na(Religion_Type)) %>%
filter(!is.na(Education)) %>%
ggplot(aes(x = Religion, y = Education, colour = Religion_Type, fill = Religion_Type)) +
geom_jitter() +
geom_smooth(method = "lm", alpha = 0.2) +
ggtitle(paste("r =", insight::format_value(cor.test(df_combined$Religion_Faith, df_combined$Education)$estimate))) +
ggpubr::stat_cor(aes(color=Religion_Type), label.x=3) +
theme_modern()
# Chunk 37
model_religion <- glmmTMB(News_Belief ~ FakeorReal / (Religion * Education) + (1|Religion_Type) + (1+FakeorReal|Participant) + (1|Dataset/News_Item), data = df_long[!(is.na(df_long$Religion)),])
model_null <- lmer(News_Belief ~ FakeorReal + Education + (1+FakeorReal|Participant) + (1|Dataset/News_Item), data = df_long[!(is.na(df_long$Religion)),])
# Evaluate effect of religion
model_parameters(model_religion)
compare_performance(model_religion, model_null, rank=TRUE)
# Visualize
modelbased::visualisation_matrix(model_religion, c("Education", "Religion", "FakeorReal"), length=6) %>%   modelbased::estimate_link(model_religion) %>%
mutate(Education = as.factor(Education)) %>%
ggplot(aes(x=Religion, y=Predicted)) +
geom_line(aes(colour=FakeorReal, alpha=Education), size = 1) +
theme_modern() +
ylab("Probability of Believing the News Item") +
xlab("Effect of Religion on News Beliefs") +
facet_wrap(~FakeorReal, scales="free_x", strip.position = "bottom")
# Chunk 38
model_education <- glmmTMB(News_Belief ~ FakeorReal / Education + Age + Religion + (1+FakeorReal|Participant) + (1|Dataset/News_Item), data = df_long[!(is.na(df_long$Religion)),])
model_null <- glmmTMB(News_Belief ~ FakeorReal + Age + Religion + (1+FakeorReal|Participant) + (1|Dataset/News_Item), data = df_long[!(is.na(df_long$Religion)),])
# Evaluate effect of education
model_parameters(model_education)
compare_performance(model_education, model_null, rank=TRUE)
# Visualize
modelbased::estimate_link(model_education, target=c("FakeorReal", "Education")) %>%
ggplot(aes(x=Education, y=Predicted)) +
geom_ribbon(aes(ymin = CI_low, ymax = CI_high, fill=FakeorReal), alpha=0.5) +
geom_line(aes(color=FakeorReal), size = 1) +
theme_modern() +
ylab("Probability of Believing the News Item") +
xlab("Effect of Education on News Beliefs")
# Chunk 39
# df_long_income <- df_long[which(df_long$Income != 150000), ] # Outlier of 150k SGD per month
# df_long_income <- df_long[which(is.na(df_long$Income) == FALSE),]
#
# model_income <- glmmTMB(News_Belief ~ FakeorReal * Income + Age + Education + (1+FakeorReal|Participant) + (1|Dataset/News_Item), data = df_long_income)
#
# # Evaluate effect of income
# model_parameters(model_income)
#
# # Visualize
# ggpredict(model_income, terms = c("Income", "FakeorReal")) %>%
#   plot() +
#   theme_modern() +
#   labs(y = "Probability of Believing the News Item", title = "Effect of Income on News Beliefs")
# ```
#
# There is no effect of income on the perception of news information as accurate.
### Interindividual Differences
items <- df_combined %>%
select(-GPTS_General, -IUS_General, -PBS_General, -SPQ_General, -MAIA_General) %>%
select(starts_with("BSCS"), starts_with("GPTS"), starts_with("CMQ"), starts_with("MAIA"), starts_with("PBS"), starts_with("PANAS"), starts_with("SPQ"), starts_with("IUS"))
# Check Factor Structure
parameters::check_factorstructure(items)
# Run PCA
pca <- principal_components(items, n = "auto", rotation = "promax", threshold = 0.3, sort = TRUE)  # auto to select no. of components with n_factors
summary(pca)
setwd("C:/Users/Pham Thanh Tam/Dropbox/GitHub/clinicalbrainlab.github.io")
blogdown::serve_site()
blogdown::stop_server()
